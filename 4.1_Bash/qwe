# Домашнее задание к занятию "4.1. Командная оболочка Bash: Практические навыки"

### Цель задания

В результате выполнения этого задания вы:

1. Познакомитесь с командной оболочкой Bash.
2. Используете синтаксис bash-скриптов.
3. Узнаете, как написать скрипт в файл так, чтобы он мог выполниться с параметрами и без.


### Чеклист готовности к домашнему заданию

1. У вас настроена виртуальная машина/контейнер/установлена гостевая ОС семейств Linux, Unix, MacOS.
2. Установлен Bash.


### Инструкция к заданию

1. Скопируйте в свой .md-файл содержимое этого файла; исходники можно посмотреть [здесь](https://raw.githubusercontent.com/netology-code/sysadm-homeworks/devsys10/04-script-01-bash/README.md).
2. Заполните недостающие части документа решением задач (заменяйте `???`, остальное в шаблоне не меняйте, чтобы не сломать форматирование текста, подсветку синтаксиса). Вместо логов можно вставить скриншоты по желанию.
3. Для проверки домашнего задания преподавателем в личном кабинете прикрепите и отправьте ссылку на решение в виде md-файла в вашем Github.
4. Любые вопросы по выполнению заданий спрашивайте в чате учебной группы и/или в разделе “Вопросы по заданию” в личном кабинете.

------

## Задание 1

Есть скрипт:
```bash
a=1
b=2
c=a+b
d=$a+$b
e=$(($a+$b))
```

Какие значения переменным c,d,e будут присвоены? Почему?

| Переменная  | Значение | Обоснование |
| ------------- | ------------- | ------------- |
| `c`  | ???  | ??? |
| `d`  | ???  | ??? |
| `e`  | ???  | ??? |

----

## Задание 2

На нашем локальном сервере упал сервис и мы написали скрипт, который постоянно проверяет его доступность, записывая дату проверок до тех пор, пока сервис не станет доступным (после чего скрипт должен завершиться). В скрипте допущена ошибка, из-за которой выполнение не может завершиться, при этом место на Жёстком Диске постоянно уменьшается. Что необходимо сделать, чтобы его исправить:
```bash
while ((1==1)
do
	curl https://localhost:4757
	if (($? != 0))
	then
		date >> curl.log
	fi
done
```

### Ваш скрипт:
```bash
#!/usr/bin/env bash
   rm ./curl.log
while ((1==1))
do
        curl http://localhost
        if (($? != 0))     
        then       
	date >> ./curl.log              
        else     
                break               
        fi       
        sleep 5       
done
```
Добавил 

   удаление страрога файла curl.log
   
   добавил else когда код выхода curl равен 0, что бы цикл завершался
   
   добавил sleep 5, что бы не так сильно забивать жесктий диск

Проверка:

![image](https://user-images.githubusercontent.com/42189764/208249425-be135448-1bde-4672-96c3-f40e546795e9.png)

во время работающего скрипта в другой сессии терминала запустил веб-сервер, скрипт завершился
---

## Задание 3

Необходимо написать скрипт, который проверяет доступность трёх IP: `192.168.0.1`, `173.194.222.113`, `87.250.250.242` по `80` порту и записывает результат в файл `log`. Проверять доступность необходимо пять раз для каждого узла.

### Ваш скрипт:
```bash
#!/usr/bin/env bash

rm ./curl.log

host=(192.168.0.1 173.194.222.113 87.250.250.242 )

for a in ${host[@]}

do

        for (( i=0; i < 5; i++ ))
        
        do
        
                curl --connect-timeout 2 http://$a
                
                echo $a $i >> curl.log
                
        done


done
```
Проверка 

![image](https://user-images.githubusercontent.com/42189764/208253748-65f4f01e-2bc4-4edc-803c-5dd2db5ccdce.png)

---
## Задание 4

Необходимо дописать скрипт из предыдущего задания так, чтобы он выполнялся до тех пор, пока один из узлов не окажется недоступным. Если любой из узлов недоступен - IP этого узла пишется в файл error, скрипт прерывается.

### Ваш скрипт:
```bash
???
```

---

## Дополнительное задание (со звездочкой*) - необязательно к выполнению

Мы хотим, чтобы у нас были красивые сообщения для коммитов в репозиторий. Для этого нужно написать локальный хук для git, который будет проверять, что сообщение в коммите содержит код текущего задания в квадратных скобках и количество символов в сообщении не превышает 30. Пример сообщения: \[04-script-01-bash\] сломал хук.

### Ваш скрипт:
```bash
#!/usr/bin/env bash

rm ./curl.log

host=(173.194.222.113 192.168.0.1 87.250.250.242 )

for a in ${host[@]}

do

        for (( i=0; i < 5; i++ ))
        
        do
        
                echo $a $i >> curl.log
                
                curl --connect-timeout 2 http://$a
                

        done
        
      if (( $? != 0))
      
      then
      
          break
          
      fi
      
done
```
![image](https://user-images.githubusercontent.com/42189764/208254107-5f160a06-12ff-4c40-a4e2-adbe9f4aa3ee.png)

![image](https://user-images.githubusercontent.com/42189764/208254122-34f59d1b-28b6-430a-82bc-ab2a3d7dfb66.png)
----

### Правила приема домашнего задания
В личном кабинете отправлена ссылка на .md файл в вашем репозитории.


### Критерии оценки

Зачет - выполнены все задания, ответы даны в развернутой форме, приложены соответствующие скриншоты и файлы проекта, в выполненных заданиях нет противоречий и нарушения логики.

На доработку - задание выполнено частично или не выполнено, в логике выполнения заданий есть противоречия, существенные недостатки. 
 
Обязательными к выполнению являются задачи без указания звездочки. Их выполнение необходимо для получения зачета и диплома о профессиональной переподготовке.
Задачи со звездочкой (*) являются дополнительными задачами и/или задачами повышенной сложности. Они не являются обязательными к выполнению, но помогут вам глубже понять тему.
